// Generated by CoffeeScript 1.6.3
var HTTP, HTTPS, httpRequest, httpsRequest, passThrough;

HTTP = require("http");

HTTPS = require("https");

httpRequest = HTTP.request;

httpsRequest = HTTPS.request;

passThrough = function(allow) {
  var boolean, hostname, _ref, _ref1;
  if (arguments.length === 0) {
    allow = function() {
      return true;
    };
  } else if (typeof allow === "string") {
    _ref = [
      allow, function(request) {
        return request.hostname === hostname;
      }
    ], hostname = _ref[0], allow = _ref[1];
  } else if (typeof allow !== "function") {
    _ref1 = [
      allow, function(request) {
        return !!boolean;
      }
    ], boolean = _ref1[0], allow = _ref1[1];
  }
  return function(request, callback) {
    var http, options, part, _i, _len, _ref2;
    if (allow(request)) {
      options = {
        protocol: request.url.protocol,
        hostname: request.url.hostname,
        port: request.url.port,
        path: request.path,
        method: request.method,
        headers: request.headers
      };
      if (request.url.protocol === "https:") {
        http = httpsRequest(options);
      } else {
        http = httpRequest(options);
      }
      http.on("error", function(error) {
        return callback(error);
      });
      http.on("response", function(response) {
        var captured;
        captured = {
          version: response.httpVersion,
          status: response.statusCode,
          headers: response.headers,
          body: []
        };
        response.on("data", function(chunk) {
          return captured.body.push(chunk);
        });
        return response.on("end", function() {
          captured.trailers = response.trailers;
          return callback(null, captured);
        });
      });
      if (request.body) {
        _ref2 = request.body;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          part = _ref2[_i];
          http.write(part[0], part[1]);
        }
      }
      return http.end();
    } else {
      return callback(null);
    }
  };
};

module.exports = passThrough;
